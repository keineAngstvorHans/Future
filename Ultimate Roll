//ultraschall
const int trigPin = 11; 
const int echoPin = 12;
const int ms1Pin = 9; 
const int ms2Pin = 10;

long duration;
int distance;

const int stepPin1 = 3; 
const int dirPin1 = 4; 
const int stepPin2 = 5; 
const int dirPin2 = 6; 


#include "MPU6050.h"
MPU6050 accelgyro;
int16_t ax, ay, az;
int16_t gx, gy, gz;



void setup() {
  
pinMode(ms1Pin, OUTPUT);
pinMode(ms2Pin, OUTPUT);


//ultaschall
 pinMode(trigPin, OUTPUT);
 pinMode(echoPin,INPUT);
 Serial.begin(38400);
  delay(3000);






 // join I2C bus (I2Cdev library doesn't do this automatically)
    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
    #elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
        Fastwire::setup(400, true);
    #endif

    // initialize serial communication
    // (38400 chosen because it works as well at 8MHz as it does at 16MHz, but
    // it's really up to you depending on your project)
    Serial.begin(38400);

    // initialize device
    Serial.println("Initializing I2C devices...");
    accelgyro.initialize();

    // verify connection
    Serial.println("Testing device connections...");
    Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");

    // use the code below to change accel/gyro offset values
    /*
    Serial.println("Updating internal sensor offsets...");
    // -76  -2359 1688  0 0 0
    Serial.print(accelgyro.getXAccelOffset()); Serial.print("\t"); // -76
    Serial.print(accelgyro.getYAccelOffset()); Serial.print("\t"); // -2359
    Serial.print(accelgyro.getZAccelOffset()); Serial.print("\t"); // 1688
    Serial.print(accelgyro.getXGyroOffset()); Serial.print("\t"); // 0
    Serial.print(accelgyro.getYGyroOffset()); Serial.print("\t"); // 0
    Serial.print(accelgyro.getZGyroOffset()); Serial.print("\t"); // 0
    Serial.print("\n");
    accelgyro.setXGyroOffset(220);
    accelgyro.setYGyroOffset(76);
    accelgyro.setZGyroOffset(-85);
    Serial.print(accelgyro.getXAccelOffset()); Serial.print("\t"); // -76
    Serial.print(accelgyro.getYAccelOffset()); Serial.print("\t"); // -2359
    Serial.print(accelgyro.getZAccelOffset()); Serial.print("\t"); // 1688
    Serial.print(accelgyro.getXGyroOffset()); Serial.print("\t"); // 0
    Serial.print(accelgyro.getYGyroOffset()); Serial.print("\t"); // 0
    Serial.print(accelgyro.getZGyroOffset()); Serial.print("\t"); // 0
    Serial.print("\n");
    */

    // configure Arduino LED pin for output
  //  pinMode(LED_PIN, OUTPUT);
    // defines pins numbers
    
 // Sets the two pins as Outputs
  pinMode(stepPin1,OUTPUT); 
  pinMode(dirPin1,OUTPUT);
  pinMode(stepPin2,OUTPUT); 
  pinMode(dirPin2,OUTPUT);


}

void loop() {

  digitalWrite(ms1Pin,HIGH); 
  digitalWrite(ms2Pin,HIGH); // Low ist fast mode

 // read raw accel/gyro measurements from device
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);


// display tab-separated accel/gyro x/y/z values
        Serial.print("a/g:\t");
        Serial.print(ax); Serial.print("\t");
        Serial.print(ay); Serial.print("\t");
        Serial.print(az); Serial.print("\t");
        Serial.print(gx); Serial.print("\t");
        Serial.print(gy); Serial.print("\t");
        Serial.println(gz);


//if schleife

if (ay < 0){
  digitalWrite(dirPin1,HIGH); // Enables the motor to move in a particular direction
  digitalWrite(dirPin2,HIGH);
  Serial.print("vorwärts");
  if (ay<-1000){
    for(int x=0;x<200;x++){
    digitalWrite(stepPin1,HIGH); 
    digitalWrite(stepPin2,HIGH); 
    delayMicroseconds(500);
    digitalWrite(stepPin1,LOW); 
    digitalWrite(stepPin2,LOW); 
    delayMicroseconds(500);
    
    }}
  
}
if(ay>0){
  digitalWrite(dirPin1,LOW); // Enables the motor to move in a particular direction
  digitalWrite(dirPin2,LOW);
  Serial.print("rückwärts"); 
 if (ay>1000){
    for(int x=0;x<200;x++){
    digitalWrite(stepPin1,HIGH); 
    digitalWrite(stepPin2,HIGH); 
    delayMicroseconds(500);
    digitalWrite(stepPin1,LOW); 
    digitalWrite(stepPin2,LOW); 
    delayMicroseconds(500);
  }}}



//normal bwegen

/*
digitalWrite(dirPin1,HIGH); // Enables the motor to move in a particular direction
  digitalWrite(dirPin2,HIGH);
  // Makes 200 pulses for making one full cycle rotation
  for(int x = 0; x < 1000; x++) {
    digitalWrite(stepPin1,HIGH); 
    digitalWrite(stepPin2,HIGH); 
    delayMicroseconds(500); 
    digitalWrite(stepPin1,LOW);
    digitalWrite(stepPin2,LOW);  
    delayMicroseconds(500); 
  }

  
  delay(1000); // One second delay
  
  digitalWrite(dirPin1,LOW); //Changes the rotations direction
  digitalWrite(dirPin2,LOW);
  // Makes 400 pulses for making two full cycle rotation
  for(int x = 0; x < 1000; x++) {
    digitalWrite(stepPin1,HIGH);
    digitalWrite(stepPin2,HIGH); 
    delayMicroseconds(500);
    digitalWrite(stepPin1,LOW);
    digitalWrite(stepPin2,LOW);
    delayMicroseconds(500);
  }


*/




 if (ay<1000&&ay>-1000){
  //ultraschall
digitalWrite(trigPin,LOW);
 delayMicroseconds(2);

 digitalWrite(trigPin,HIGH);
 delayMicroseconds(10);
 digitalWrite(trigPin,LOW);

 duration = pulseIn(echoPin,HIGH);
 distance = duration*0.034/2;

 Serial.print("DIstance:  ");
 Serial.println(distance);
 }
  




}
